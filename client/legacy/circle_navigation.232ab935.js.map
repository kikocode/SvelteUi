{"version":3,"file":"circle_navigation.232ab935.js","sources":["../../../../src/components/CircleNavigation/CircleNavigation.svelte","../../../../src/components/CircleNavigation/CircleNavigation2.svelte","../../../../src/routes/circle_navigation.svelte"],"sourcesContent":["<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\timport Ripple from '../Ripple/Ripple.svelte';\r\n\r\n\texport let useNestedElements = true;\r\n\texport let ripple = true;\r\n\texport let color = '#ff00aa';\r\n\texport let circleContent;\r\n\t// options: left, right, top, bottom. default is bottom\r\n\texport let direction = 'left';\r\n\texport let circleSize = 60;\r\n\texport let elementSize = 40;\r\n\r\n\tlet timeouts = [];\r\n\tlet animationStagger = 15;\r\n\r\n\tlet bgRef;\r\n\tlet elementsRef;\r\n\tlet elems;\r\n\r\n\tlet directions = {\r\n\t\ttop: {\r\n\t\t\tclass: 'circnav--direction-top'\r\n\t\t},\r\n\t\tbottom: {\r\n\t\t\tclass: 'circnav--direction-bottom'\r\n\t\t},\r\n\t\tleft: {\r\n\t\t\tclass: 'circnav--direction-left'\r\n\t\t},\r\n\t\tright: {\r\n\t\t\tclass: 'circnav--direction-right'\r\n\t\t}\r\n\t};\r\n\r\n\t$: directionClass = directions[direction]\r\n\t\t? directions[direction].class\r\n\t\t: direction;\r\n\t$: circleNavigationClasses = `\r\n    ${directionClass}\r\n  `;\r\n\r\n\t$: circleNavigationStyle = `\r\n\t\t--color: ${color};\r\n\t\t--circle-size: ${circleSize}px;\r\n\t\t--element-size: ${elementSize}px;\r\n\t`;\r\n\r\n\tonMount(() => {\r\n\t\telems = elementsRef.children;\r\n\t\t// using svelte's {#each} inside a named slot renders an extra div,\r\n\t\t// which will be taken care of here until fixed\r\n\t\t// @see - https://github.com/sveltejs/svelte/issues/2080\r\n\t\tif (useNestedElements) elems = elems[0];\r\n\t\tlet entries = Array.from(elems.children);\r\n\t\tentries.forEach((el, i) => {\r\n\t\t\tif (el.classList) el.classList.add('circnav_subcircle');\r\n\t\t});\r\n\t});\r\n\r\n\tconst animateIn = e => {\r\n\t\tclearTimeouts();\r\n\t\tArray.from(elems.children).forEach((el, i) => {\r\n\t\t\tlet timeout = setTimeout(() => {\r\n\t\t\t\tif (el.classList) {\r\n\t\t\t\t\tel.classList.add('circnav_subcircle--active');\r\n\t\t\t\t}\r\n\t\t\t\telems.visible += 1;\r\n\t\t\t}, i * animationStagger);\r\n\t\t\ttimeouts.push(timeout);\r\n\t\t});\r\n\t};\r\n\r\n\tconst animateOut = e => {\r\n\t\tclearTimeouts();\r\n\t\tlet entries = Array.from(\r\n\t\t\telems.querySelectorAll('.circnav_subcircle--active')\r\n\t\t);\r\n\t\tlet maxAnimation = animationStagger * entries.length;\r\n\t\tentries.forEach((el, i) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (el.classList) {\r\n\t\t\t\t\tel.classList.remove('circnav_subcircle--active');\r\n\t\t\t\t}\r\n\t\t\t\t// apply max duration so the first element fades last\r\n\t\t\t}, maxAnimation - i * animationStagger);\r\n\t\t});\r\n\t};\r\n\r\n\tconst clearTimeouts = () => {\r\n\t\ttimeouts.forEach(timeout => {\r\n\t\t\tclearInterval(timeout);\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleMouseover = e => {\r\n\t\tanimateIn();\r\n\t};\r\n\r\n\tconst handleMouseout = e => {\r\n\t\tanimateOut();\r\n\t};\r\n</script>\r\n\r\n<style type=\"text/scss\">\r\n\t.circnav {\r\n\t\tdisplay: flex;\r\n\t\talign-items: flex-start;\r\n\t\t--transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n\t\t\tbox-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n\t\t\tborder 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n\t\t--box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2),\r\n\t\t\t0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\t.circnav-element {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.circnav--direction-bottom {\r\n\t\t& .circnav-element {\r\n\t\t\tflex-flow: column;\r\n\t\t}\r\n\t\t& .circnav_subcircles {\r\n\t\t\tflex-flow: column;\r\n\t\t}\r\n\t\t& .circnav_subcircles > :global(*) {\r\n\t\t\tflex-flow: column;\r\n\t\t}\r\n\t}\r\n\r\n\t.circnav--direction-top {\r\n\t\t& .circnav-element {\r\n\t\t\tflex-flow: column;\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\t\t& .circnav_subcircles {\r\n\t\t\tflex-flow: column;\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\t\t& .circnav_subcircles > :global(*) {\r\n\t\t\tflex-flow: column;\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\t}\r\n\r\n\t.circnav--direction-right {\r\n\t\t& .circnav-element {\r\n\t\t\tflex-flow: row;\r\n\t\t}\r\n\t\t& .circnav_subcircles {\r\n\t\t\tflex-flow: row;\r\n\t\t}\r\n\t\t& .circnav_subcircles > :global(*) {\r\n\t\t\tflex-flow: row;\r\n\t\t}\r\n\t}\r\n\r\n\t.circnav--direction-left {\r\n\t\t& .circnav-element {\r\n\t\t\tflex-flow: row-reverse;\r\n\t\t}\r\n\t\t& .circnav_subcircles {\r\n\t\t\tflex-flow: row-reverse;\r\n\t\t}\r\n\t\t& .circnav_subcircles > :global(*) {\r\n\t\t\tflex-flow: row-reverse;\r\n\t\t}\r\n\t}\r\n\r\n\t/* Subcircle */\r\n\t.circnav_subcircles {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\t.circnav_subcircles > :global(*) {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t}\r\n\t.circnav :global(.circnav_subcircle) {\r\n\t\tdisplay: flex;\r\n\t\twidth: var(--element-size);\r\n\t\theight: var(--element-size);\r\n\t\tmargin: 6px;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tposition: relative;\r\n\t\tborder-radius: 50%;\r\n\t\ttransform: scale(0);\r\n\t\ttransform-origin: center;\r\n\t\tbackground: var(--color);\r\n\t\ttransition: var(--transition);\r\n\t\tbox-shadow: var(--box-shadow);\r\n\t\tz-index: 10;\r\n\t\topacity: 0;\r\n\t}\r\n\t.circnav :global(.circnav_subcircle--active) {\r\n\t\ttransform: scale(1);\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t/* Button */\r\n\t.circnav_button {\r\n\t\tposition: relative;\r\n\t\tz-index: 100;\r\n\t\toverflow: hidden;\r\n\t\toutline: none;\r\n\t\tborder: none;\r\n\r\n\t\tmargin: 10px;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tdisplay: flex;\r\n\t\tcolor: white;\r\n\t\tfill: white;\r\n\t\tcursor: pointer;\r\n\t\twidth: var(--circle-size);\r\n\t\theight: var(--circle-size);\r\n\t\tbox-shadow: var(--box-shadow);\r\n\t\ttransition: var(--transition);\r\n\t\tbackground: var(--color);\r\n\t\tborder-radius: 50%;\r\n\t}\r\n\t.circnav_button > :global(*) {\r\n\t\tdisplay: flex;\r\n\t}\r\n\r\n\t/* Background */\r\n\t.circnav_bg {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>\r\n\r\n<div\r\n\tclass={'circnav ' + circleNavigationClasses}\r\n\tstyle={circleNavigationStyle}\r\n\ton:mouseleave={handleMouseout}>\r\n\t<div class=\"circnav-element\">\r\n\t\t<button class=\"circnav_button\" on:mouseenter={handleMouseover}>\r\n\t\t\t{#if ripple}\r\n\t\t\t\t<Ripple />\r\n\t\t\t{/if}\r\n\r\n\t\t\t<slot name=\"circle\" />\r\n\t\t</button>\r\n\t\t<div class=\"circnav_subcircles\" bind:this={elementsRef}>\r\n\t\t\t<slot name=\"elements\" />\r\n\t\t</div>\r\n\r\n\t\t<div class=\"circnav_bg\" bind:this={bgRef} />\r\n\t</div>\r\n</div>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\timport Ripple from '../Ripple/Ripple.svelte';\r\n\r\n\texport let useNestedElements = true;\r\n\texport let ripple = true;\r\n\texport let color = '#ff00aa';\r\n\texport let circleContent;\r\n\r\n\tlet circleSize = 60;\r\n\tlet elementSize = 40;\r\n\r\n\tlet bgRef;\r\n\tlet elementsRef;\r\n\tlet elems;\r\n\r\n\t$: circleNavigationStyle = `\r\n\t\t--color: ${color};\r\n\t\t--circle-size: ${circleSize}px;\r\n\t\t--element-size: ${elementSize}px;\r\n\t`;\r\n\r\n\tonMount(() => {\r\n\t\telems = elementsRef.childNodes;\r\n\t\t// using svelte's {#each} inside a named slot renders an extra div, which will be taken care of here until fixed\r\n\t\t// @see - https://github.com/sveltejs/svelte/issues/2080\r\n\t\tif (useNestedElements) elems = elems[0].childNodes;\r\n\t\telems.forEach((el, i) => {\r\n\t\t\tlet top = circleSize / 2 - elementSize / 2;\r\n\t\t\tlet left = circleSize / 2 - elementSize / 2;\r\n\t\t\tel.style.opacity = `0`;\r\n\t\t\tel.style.top = `${top}px`;\r\n\t\t\tel.style.left = `${left}px`;\r\n\t\t\tif (el.classList) el.classList.add('circle-navigation_element');\r\n\t\t});\r\n\t});\r\n\r\n\tconst handleMouseover = e => {\r\n\t\tlet gapX = 10;\r\n\t\tlet startX = circleSize + gapX;\r\n\t\tlet maxW = startX;\r\n\r\n\t\telems.forEach((el, i) => {\r\n\t\t\tlet w = el.offsetWidth;\r\n\t\t\tlet left = i * (w + gapX) + startX;\r\n\t\t\tmaxW += i * (w + gapX);\r\n\r\n\t\t\tel.style.opacity = `1`;\r\n\t\t\tel.style.left = `${left}px`;\r\n\t\t});\r\n\r\n\t\tbgRef.style = `\r\n\t\t\twidth:${maxW}px;\r\n\t\t`;\r\n\t};\r\n\r\n\tconst handleMouseout = e => {\r\n\t\telems.forEach((el, i) => {\r\n\t\t\tlet left = circleSize / 2 - elementSize / 2;\r\n\t\t\tel.style.left = `${left}px`;\r\n\t\t});\r\n\t\tbgRef.style = `\r\n\t\t\twidth:100%;\r\n\t\t`;\r\n\t};\r\n</script>\r\n\r\n<style type=\"text/scss\">\r\n\t.circle-navigation {\r\n\t\tposition: relative;\r\n\t\tmargin: 15px;\r\n\t\t--transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n\t\t\tbox-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n\t\t\tborder 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n\t\t--box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2),\r\n\t\t\t0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n\r\n\t.circle-navigation :global(.circle-navigation_element) {\r\n\t\tposition: absolute;\r\n\t\tz-index: 20;\r\n\t\topacity: 0;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tborder-radius: 50%;\r\n\t\twidth: var(--element-size);\r\n\t\theight: var(--element-size);\r\n\t\tbackground: var(--color);\r\n\t\ttransition: var(--transition);\r\n\t\tbox-shadow: var(--box-shadow);\r\n\t}\r\n\r\n\t.circle-navigation_button {\r\n\t\tposition: relative;\r\n\t\tz-index: 100;\r\n\t\toverflow: hidden;\r\n\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tdisplay: flex;\r\n\t\tcolor: white;\r\n\t\tfill: white;\r\n\t\tcursor: pointer;\r\n\t\twidth: var(--circle-size);\r\n\t\theight: var(--circle-size);\r\n\t\tbox-shadow: var(--box-shadow);\r\n\t\ttransition: var(--transition);\r\n\t\tbackground: var(--color);\r\n\t\tborder-radius: 50%;\r\n\t}\r\n\t.circle-navigation_button > :global(*) {\r\n\t\tdisplay: flex;\r\n\t}\r\n\r\n\t.circle-navigation_background {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground: transparent;\r\n\t}\r\n\r\n\t.circle-navigation_elements {\r\n\t}\r\n</style>\r\n\r\n<div\r\n\tclass=\"circle-navigation\"\r\n\ton:mouseover={handleMouseover}\r\n\ton:mouseout={handleMouseout}\r\n\tstyle={circleNavigationStyle}>\r\n\r\n\t<button class=\"circle-navigation_button\">\r\n\t\t{#if ripple}\r\n\t\t\t<Ripple />\r\n\t\t{/if}\r\n\r\n\t\t<slot name=\"circle\" />\r\n\t</button>\r\n\t<div class=\"circle-navigation_elements\" bind:this={elementsRef}>\r\n\t\t<slot name=\"elements\" />\r\n\t</div>\r\n\r\n\t<div class=\"circle-navigation_background\" bind:this={bgRef} />\r\n</div>\r\n","<script>\r\n\timport { Ripple } from '../components/Ripple';\r\n\timport { useRipple } from '../components/Ripple';\r\n\r\n\timport { CircleNavigation } from '../components/CircleNavigation';\r\n\timport { CircleNavigation2 } from '../components/CircleNavigation';\r\n\r\n\timport { Block } from '../components/Layout';\r\n\timport { Line } from '../components/Layout';\r\n\r\n\timport { randomHex } from '../components/utils/color.js';\r\n\timport { colors } from '../components/utils/color.js';\r\n\r\n\timport { Favorite } from '../assets/icons';\r\n\timport { Phone } from '../assets/icons';\r\n\timport { Star } from '../assets/icons';\r\n\timport { Check } from '../assets/icons';\r\n\timport { Close } from '../assets/icons';\r\n\r\n\tlet randomColor = '#2a74e6';\r\n\r\n\tconst setRandomColor = () => {\r\n\t\t//var c = randomHex();\r\n\t\tvar c = colors[Math.round(Math.random() * colors.length)];\r\n\t\trandomColor = c;\r\n\t};\r\n\r\n\tconst randomIcon = () => {\r\n\t\tconst icons = [Check, Favorite, Phone, Star, Close];\r\n\t\treturn randomPick(icons);\r\n\t};\r\n\r\n\tconst randomPick = arr => {\r\n\t\treturn arr[Math.floor(Math.random() * arr.length)];\r\n\t};\r\n\r\n\tlet circles1 = Array.from({ length: 5 }, () => ({ icon: randomIcon() }));\r\n\tlet circles2 = Array.from({ length: 8 }, () => ({ icon: randomIcon() }));\r\n\tlet circles3 = Array.from({ length: 2 }, () => ({ icon: randomIcon() }));\r\n\r\n\tlet actives0 = [];\r\n\tlet actives1 = [];\r\n\tlet actives2 = [];\r\n\tlet actives4 = [];\r\n</script>\r\n\r\n<style>\r\n\t.buttonLabel {\r\n\t\tfont-size: 12px;\r\n\t\tcolor: white;\r\n\t\twidth: auto !important;\r\n\t\theight: auto !important;\r\n\t\tpadding: 10px 12px;\r\n\t\tborder-radius: 20px !important;\r\n\t}\r\n\r\n\t.whiteIconCircle {\r\n\t\tfill: #666666;\r\n\t\tcursor: pointer;\r\n\t\tbackground: white !important;\r\n\t}\r\n</style>\r\n\r\n<h2>Circle Navigation</h2>\r\n<Block>\r\n\t<div style=\"display:flex; position:relative;\">\r\n\r\n\t\t<div style=\"display:none;\">\r\n\t\t\t<CircleNavigation2 color={randomColor}>\r\n\t\t\t\t<div slot=\"circle\">\r\n\t\t\t\t\t<Check />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div slot=\"elements\">\r\n\t\t\t\t\t{#each new Array(3).fill('') as elem, i}\r\n\t\t\t\t\t\t<div style=\"fill:white; cursor:pointer;\">\r\n\t\t\t\t\t\t\t<Check />\r\n\t\t\t\t\t\t\t<Ripple color=\"#ffffff\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t</CircleNavigation2>\r\n\t\t</div>\r\n\r\n\t\t<CircleNavigation color={randomColor} direction=\"right\">\r\n\r\n\t\t\t<div slot=\"circle\">\r\n\t\t\t\t<Close />\r\n\t\t\t</div>\r\n\t\t\t<div slot=\"elements\">\r\n\t\t\t\t<div class={'buttonLabel'}>\r\n\t\t\t\t\tRight\r\n\t\t\t\t\t<Ripple color=\"#ffff00\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t{#each Array.from({ length: 6 }, () => ({\r\n\t\t\t\t\ticon: randomIcon()\r\n\t\t\t\t})) as elem, i}\r\n\t\t\t\t\t<div class={'whiteIconCircle'}>\r\n\t\t\t\t\t\t<svelte:component this={elem.icon} />\r\n\t\t\t\t\t\t<Ripple color=\"#000000\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</CircleNavigation>\r\n\r\n\t\t<div>\r\n\t\t\t<CircleNavigation color={randomColor} direction=\"bottom\">\r\n\t\t\t\t<div slot=\"circle\">\r\n\t\t\t\t\t<Close />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div slot=\"elements\">\r\n\t\t\t\t\t<div class={'buttonLabel'}>Bot</div>\r\n\t\t\t\t\t{#each Array.from({ length: 2 }, () => ({\r\n\t\t\t\t\t\ticon: randomIcon()\r\n\t\t\t\t\t})) as elem, i}\r\n\t\t\t\t\t\t<div class={'whiteIconCircle'}>\r\n\t\t\t\t\t\t\t<svelte:component this={elem.icon} />\r\n\t\t\t\t\t\t\t<Ripple color=\"#000000\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</CircleNavigation>\r\n\t\t\t<CircleNavigation color={randomColor} direction=\"top\">\r\n\t\t\t\t<div slot=\"circle\">\r\n\t\t\t\t\t<Close />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div slot=\"elements\">\r\n\t\t\t\t\t<div class={'buttonLabel'}>Top</div>\r\n\t\t\t\t\t{#each Array.from({ length: 2 }, () => ({\r\n\t\t\t\t\t\ticon: randomIcon()\r\n\t\t\t\t\t})) as elem, i}\r\n\t\t\t\t\t\t<div class={'whiteIconCircle'}>\r\n\t\t\t\t\t\t\t<svelte:component this={elem.icon} />\r\n\t\t\t\t\t\t\t<Ripple color=\"#000000\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t</CircleNavigation>\r\n\t\t</div>\r\n\t\t<CircleNavigation color={randomColor} direction=\"left\">\r\n\t\t\t<div slot=\"circle\">\r\n\t\t\t\t<Close />\r\n\t\t\t</div>\r\n\t\t\t<div slot=\"elements\">\r\n\t\t\t\t<div class={'buttonLabel'}>Left</div>\r\n\t\t\t\t{#each Array.from({ length: 8 }, () => ({\r\n\t\t\t\t\ticon: randomIcon()\r\n\t\t\t\t})) as elem, i}\r\n\t\t\t\t\t<div class={'whiteIconCircle'}>\r\n\t\t\t\t\t\t<svelte:component this={elem.icon} />\r\n\t\t\t\t\t\t<Ripple color=\"#000000\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/each}\r\n\t\t\t</div>\r\n\t\t</CircleNavigation>\r\n\r\n\t</div>\r\n\r\n</Block>\r\n"],"names":["ripple","circleNavigationClasses","circleNavigationStyle","handleMouseover","handleMouseout","animationStagger","bgRef","elementsRef","elems","useNestedElements","color","circleContent","direction","circleSize","elementSize","timeouts","directions","top","class","bottom","left","right","onMount","children","Array","from","forEach","el","i","classList","add","clearTimeouts","timeout","clearInterval","directionClass","e","setTimeout","visible","push","entries","querySelectorAll","maxAnimation","length","remove","animateOut","childNodes","style","opacity","startX","maxW","w","offsetWidth","fill","elem","icon","ctx","randomColor","randomIcon","randomPick","Check","Favorite","Phone","Star","Close","arr","Math","floor","random"],"mappings":"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"}